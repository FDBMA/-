.LOG

182之后
23:11 2022/11/23
1.1.1（01/03）	1
JavaScript的历史知识
- 轻量级计算机语言
- 网景公司发布Navigator浏览器0.9版（1994年） 第一个比较成熟的网络浏览器 只具备浏览内容（Netscape Communications Corporation）
- 1995年Sun公司正事把Oak语言改名为Java
JavaScript： 借鉴C语言基本语法+借鉴java语言数据类型和内存管理+借鉴Scheme语言+借鉴Self语言基于原型的继承机制 （简化的函数式编程和简化的面向对象编程）-->JavaScript是一个简化各种语言后的产物
1.1.2（02/03）	2
JavaScript的组成部分
-一个网页
	- HTML 页面骨架，决定一个页面中出现的内容
	- CSS 页面样式，决定一个内容的样子
	- JS 页面行为，决定网页中哪些内容出现什么变化

- JavaScript 组成部分
	- BOM(Browser Object Model) 操作浏览器发生变化的属性和方法
	- DOM(Document Object Model) 操作文档流发生变化的属性和方法
	- ECMAScript 指JS代码的书写语法和书写规则
1.1.3（03/03）	3
JavaScript的书写位置
1. 行内式【不利于代码维护，还会导致html文件臃肿】 直接把代码写在标签身上
	- a标签 书写在href属性上
> 格式：<a href="javascript:JS代码;">点我一下</a>
> `<a href="javascript:alert('hello word');">点我一下</a>`  ``alert('hello word')``是在浏览器出现提示层，显示括号内的文本内容（会弹出一个浏览器提示框）
	- 非a标签 书写在行为属性上
> <div onclick="alert('hello word')">点我一下</div>
> 此处的`onclick`是一个点击行为属性，在属性值的位置书写JS代码即可
2. 内嵌式 把代码书写在一个script标签对内，不需要依赖任何行为，打开页面就会执行。
> 在`<body></body>`内书写`<script></script>` ，`<script></script>` 中书写要执行的JS代码
3. 外链式 【推荐使用】把代码书写在一个`.js`后缀的文件内，文件内直接书写我们需要执行的JS代码。不需要依赖任何行为，打开页面就会执行。
需要在html文件的`<body></body>`内写一个`<script src=""></script>` ，在`src=""`中写js文件位置  `src=""`是引入JS文件的属性。

0:10 2022/11/26
1.2.1（01/04）	4
JavaScript 变量
- 变量：在程序的运行过程中，保存一个中间值使用。
	- 书写方法：`var 任意名字 = 一个数值` 表示内存中准备一个容器，任意名字为对该容器的命名，一个数值表示该容器的值。【！js中的`=`表示赋值
！一个容器只能存储一个值，如果二次或多次赋值只会保留最后一次的赋值】
- 变量命名规则： 数字、字母、下划线、美元符组成【！不能以数字开头
！严格区分英文字母大小写
！不能是关键字（js中其他的有特殊意义的字符）
尽量使用有意义的单词】
- 注释书写办法：
	- `//`之后书写单行注释
	- `/*  */`内部书写多行注释可以换行书写

23:58 2022/11/26
1.2.2（02/04）	5
js中的数据：分为`基本数据类型`和`引用数据类型`
- 基本数据类型
	- 数值类型
> var n1 = 100（或其他负数）
> var n2 = 2e5  `2e5`表示2乘以10的五次方
> var n3 = 0x100  表示16进制
> var n4 = 0o100  表示8进制
> var n5 = 0b100  表示2进制
	- 字符串类型 `""``''`之间都是字符串类型数据，js中不区分单双引号
> var s1 = 'hello word'
> var s2 = "hello xiaofeng"
	- 布尔类型 ture真 false假
>var b1 = true
>var b2 = false
	- 空类型：`undefined`和`null`
>null: 表示有值，有一个空值
var k1 = null
>undefined: 表示没有值
var k2
- 检测数据类型：用typeof
> typeof 要检测的变量  
> 该变量存储的数据的数据类型

13:45 2022/11/27
1.2.3（03/04）	6
数据类型转换
- 转数值
>1.Number（）； `()`里写要转换的内容  如果碰到可以转换为数字的时候，可以展示为一个数字；如果碰到非数字不能转换的时候，转换出的结果会展示为NaN(not a number),最后结果会转换为数值类型，但不是数字。
>2.parseInt();  `()`里写要转换的内容 如果要转换的内容的第一位不是合法数字时，得到结果是NaN，结果的类型是数值类型;其他情况下会一位一位数据进行转换，遇到不能转换的数据时`停止转换`，转换结果的类型是数据类型。
>parseFloat();  `()`里写要转换的内容 parseInt只能转换到整数部分，parseFloat可以转换到小数部分

- 转字符串
>1.String();  `()`里写要转换的内容
>2.toString(); `要转换的内容.toString()` 该语法的`()`中不用书写内容

- 转布尔
>Boolean(); `()`里写要转换的内容  转换结果只会有两种结果：ture&false
js中一共会有5个值转换成false：
1. 0
2. NaN
3.‘’
4. undefined
5. null
其余都会被转换成ture

19:54 2022/11/28
1.2.4（04/04）	7	（005try）
JavaScript的运算符
- 算术运算符： 进行数学运算的符号。
> 1. `+` ：进行加法核算
	- 当符号两边都是数字或布尔的时候，进行数学运算。
	- 只要符号任意一边是字符串的时候，就进行字符串拼接。
> 2.`-` : 进行减法运算
> 3.`*` : 进行乘法运算
> 4.`/` : 进行除法运算
> 5.`%` : 进行取余运算

- 赋值运算符：进行赋值运算的符号。
> 1. `=` 将等号右边的值赋值给等号左边的变量
> 2.`+=` 加等于 将等号右边的值赋值（加）给“+=”左边的变量
> 3.`-=` 减等于 将等号右边的值赋值（左边数字减符号右边数字）给“-=”左边的变量
> 4.`*=` 乘等于 将等号右边的值赋值给“*=”左边的变量
> 5.`/=` 除等于 将等号右边的值赋值给“/=”左边的变量
> 6.`%=` 取余等于 将等号右边的值赋值给“%=”左边的变量

- 比较运算符： 进行比较运算的符号。（其结果一定是一个布尔类型）
> 1.`>` 大于比较
> 2.`<` 小于比较
> 3.`>=` 大于等于
> 4.`<=` 小于等于
> 5.`==` 等于比较 只比较值是否相等
> 6.`===` 全等于比较 值和数据类型同时比较是否相等
> 7.`!=` 不等于比较 只比较值是否不相等
> 8.`!==` 不全等于比较 同时比较值和数据类型是否不相等

- 逻辑运算符： 进行逻辑运算的符号。
> 1. `&&` 与 两边都true才得到true
> 2. `||`  或 一边true就能得到true
> 3. `!`  非 取反运算，本身true就得到false

- 自增自减运算符：单独对一个变量进行+1或-1操作的符号。
> 1.`++`  在自身的基础上+1
	- 前置加加（在变量前加加），先把变量值改变，用改变后的值参与运算
	- 后置加加（在变量后加加），先用变量值参与运算，再改变变量值
> 2.`--` 在自身的基础上-1
	- 前置减减（在变量前加加），先把变量值改变，用改变后的值参与运算
	- 后置减减（在变量后加加），先用变量值参与运算，再改变变量值

22:07 2022/11/29
1.3.1-1（01/06）	8	（006try）
JavaScript 条件分支语句
4种形式 `()`里写条件；`{}`里写条件满足时执行的代码
1. if () {}
> 条件满足就执行，不满足就不执行
2. if () {} else {}
> 条件满足就执行if后内容，不满足就执行else
3. if () {} else if() {}
> 哪一个if的条件满足就执行哪一个if后的内容
4. if () {} else if {} else {}
>  所有条件都不满足时，执行else后的内容

0:03 2022/12/2
1.3.1-1（01/06）	9	（007try）
案例：平年还是闰年 

0:21 2022/12/3
1.3.2-1（02/06）	10	（008try）
条件分支语句（switch）
switch (已知条件) {
case 选项1:
case 选项2:
}
break表示当前选择已作出，结束该语句

19:51 2022/12/7
1.3.2-3（02/06）	11	（009try）
案例：一年中的第几天

18:20 2022/12/9
1.3.3（03/06）	12	（010...）
while循环
必须书写改变初始值，如果不书写会导致死循环程序崩溃
`while循环`和`do while循环`都包含**定义初始变量**、**条件判断**、**改变初始值**

21:04 2022/12/12
1.3.4（04/06）	13	（013try）
do while循环
当初始变量在条件以内，while和dowhile一样
当初始变量在条件以内，while不执行循环，dowhile循环执行一次

prompt("你爱不爱我 ? ") 括号中的内容在浏览器弹出一个输入框

21:51 2022/12/13
1.3.5（05/06）	14	（014try）
for循环
for (定义初始变量;条件判断;改变初始值) {
	重复执行的代码
}

22:06 2022/12/15
1.3.6-1（06/06）	15	（015try）
循环案例练习

10:22 2023/1/4
1.3.6-2（06/06）	16	（016try）
寻找最大公约数
寻找最小公倍数

